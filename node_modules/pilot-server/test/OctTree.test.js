var should = require('chai').should(),
	OctTree = require('../OctTree.js');

function createFakeNode() {
	return createUniqueFakeNode(0);
}

function createUniqueFakeNode(offset) {
	return {
		position: {
			x: offset + Math.floor(Math.random() * 10),
			y: offset + Math.floor(Math.random() * 10),
			z: offset + Math.floor(Math.random() * 10)
		}
	}
}

describe("OctTree",function() {
	var o = new OctTree({
		rootNode: {
			bounds: {
				x:0,
				y:0,
				z:0,
				width:100,
				height:100,
				depth:100
			}
		}
	});
	afterEach(function() {
		o.clear();
	});
	describe("#insert",function() {
		it("should exist",function() {
			o.insert.should.exist;
		});
		it("should throw an exception if it's called without arguments",function() {
			o.insert.should.throw();

		});
		it("should throw an exception if it's called with invalid arguments",function() {
			(function() { o.insert(1); }).should.throw();
		});
	});
	describe("#retrieve",function() {
		it("should throw if the tree is empty",function() {
			o.retrieve.should.throw();
		});
		it("should return the requested node if the requested node is present in the tree",function() {
			var newNode = createFakeNode();
			o.insert(newNode);
			o.retrieve(newNode).should.be.ok;
		});
	});
	describe("#clear",function() {
		it("should wipe all nodes out of the tree",function() {
			for(var i = 0; i < 10; i++) o.insert(createUniqueFakeNode(i));
			o.clear();
			o.root.nodes.length.should.eql(0);
		});
	});
});