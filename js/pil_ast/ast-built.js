(function(){function t(e){this.setLeftNode(e.leftNode),e.rightNode&&this.setRightNode(e.rightNode),this.operator=e.operator||"",this.type="ConditionNode"}var e=["==","!=",">","<",""];t.prototype.value=function(){var e;switch(this.operator){case"==":e=this.leftNode.value()==this.rightNode.value();break;case"!=":e=this.leftNode.value()!=this.rightNode.value();break;case">":e=this.leftNode.value()>this.rightNode.value();break;case"<":e=this.leftNode.value()<this.rightNode.value();break;default:e=!!this.leftNode.value()}return e},t.prototype.setLeftNode=function(e){if("value"in e&&e.value instanceof Function)return this.leftNode=e,this;throw new Error("Type error: left-hand-side of conditional statement has indeterminate value.  Node type: "+e.type)},t.prototype.setRightNode=function(e){if("value"in e&&e.value instanceof Function)return this.rightNode=e,this;throw new Error("Type error: right-hand-side of conditional statement has indeterminate value.  Node type: "+e.type)},t.prototype.setOperator=function(t){if(t&&e.indexOf(t)==-1)throw new Error("Invalid boolean operator used: "+t);this.operator=t||""},window.ConditionNode=t})(),define("ConditionNode.js",function(){}),function(){function e(e){this._value=e,this.type="ConstantNode"}e.prototype.value=function(){return this._value},window.ConstantNode=e}(),define("ConstantNode.js",function(){}),function(){function e(e){e.parentObject&&this.setParentObject(e.parentObject),e.propertyName&&this.setPropertyName(e.propertyName),e.accessFunction&&this.setAccessFunction(e.accessFunction),this.type="PropertyAccessNode"}e.prototype._parentObject=null,e.prototype._propertyName="",e.prototype._accessFunction=function(e,t){return e[t]},e.prototype.value=function(){return this._accessFunction(this._parentObject,this._propertyName)},e.prototype.setParentObject=function(e){return this._parentObject=e,this},e.prototype.setPropertyName=function(e){return this._propertyName=e,this},e.prototype.setAccessFunction=function(e){this._accessFunction=e},window.PropertyAccessNode=e}(),define("PropertyAccessNode.js",function(){}),function(){function e(e){this.value=e.initialValue,this.type="VariableNode"}e.prototype.value=function(){return this.value},e.prototype.setValue=function(e){return this.value=e,this},window.VariableNode=e}(),define("VariableNode.js",function(){}),function(){function e(e){e.statementNodes&&this.addStatementNodes(e.statementNodes)}e.prototype.type="FunctionNode",e.prototype._statementNodes=[],e.prototype.addStatementNodes=function(e){if(e instanceof Array)console.log("pushing many nodes..."),this._statementNodes=this._statementNodes.concat(e.filter(function(e){return e instanceof StatementNode}));else{if(!(e instanceof StatementNode))throw new Error("Language Error: FunctionNode#addStatementNodes passed invalid node type (developer issue, not your fault if you're a player)");console.log("pushing a node..."),this._statementNodes.push(e)}this._statementNodes.length==0&&console.log(e)},e.prototype.run=function(){if(this._statementNodes.length==0)throw new Error("FunctionNode with no statements!!!");var e;return this._statementNodes.forEach(function(t){e=t.value()}),e},window.FunctionNode=e}(),define("FunctionNode.js",function(){}),function(){function e(e){e.f&&this.setFunction(e.f),this.type="StatementNode"}this._f=function(){return undefined},e.prototype.value=function(){return this._f()},e.prototype.setFunction=function(e){this._f=e},window.StatementNode=e}(),define("StatementNode.js",function(){}),require(["ConditionNode.js","ConstantNode.js","PropertyAccessNode.js","VariableNode.js","FunctionNode.js","StatementNode.js"]),define("ast",function(){});